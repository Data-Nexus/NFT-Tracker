type Contract @entity {
  id: ID!
  asERC1155: Collection
}

type Account @entity {
  " the wallet address "
  id: ID!

  " The transfers originating from this account "
  transfersFrom: [Transfer!]! @derivedFrom(field: "senderAddress")

  " The transfers recevied by this account"
  transfersTo: [Transfer!]! @derivedFrom(field: "receiverAddress")

  " M:M relationship for Accounts and Collections "
  holdings: [Holding!]! @derivedFrom(field: "account")
}

"replaces TokenRegistry"
type Collection @entity {
  " The address of the collection "
  id: ID!

  " The name of the collection "
  name: String

  " The symbol for the collection "
  symbol: String

  " Tokens for the collection"
  tokens: [Token!]! @derivedFrom(field: "collection")
}

type Token @entity {
  " Ethereum / Collection Addrress - Token Id "
  id: ID!

  " The collection address "
  collection: Collection!

  " The id of the NFT"
  identifier: BigInt!

  " Total Supply of Tokens "
  totalSupply: BigInt!

  " Transfers involving this token "
  transfers: [Transfer!]! @derivedFrom(field: "token")

  " M:M relationship for Accounts and Collections "
  holdings: [Holding!]! @derivedFrom(field: "token")
}

type Holding @entity {
  " Account Id - Token Id "
  id: ID!

  " Address of the account "
  account: Account!

  " token Id "
  token: Token!

  " Count of NFT's owned in a collection by the Address"
  balance: BigInt!
}

type Transfer @entity(immutable: true) {
  " Block Number and Event Id in which the transfers event occured"
  id: ID!

  " The collection address "
  collection: Collection!

  " The collection addrress - The token id "
  token: Token!

  " The sender address "
  senderAddress: Account!

  " The receiver address "
  receiverAddress: Account!

  " Timestamp for block "
  timestamp: BigInt!

  " Block Number "
  blockNumber: BigInt!

  " Transaction hash in which the transfer event occured"
  transaction: Bytes!
}
